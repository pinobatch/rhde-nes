#!/usr/bin/env python3
#
# Lookup table generator for Concentration Room
# Copyright 2010 Damian Yerrick
#
# Copying and distribution of this file, with or without
# modification, are permitted in any medium without royalty
# provided the copyright notice and this notice are preserved.
# This file is offered as-is, without any warranty.
#
from __future__ import with_statement, division, print_function
import sys

# This is a polyglot py2/py3 program
try:
    xrange
except NameError:
    xrange = range

baseNoteFreq = 55.0
ntscFreq = 39375000.0/(22 * 16)
palFreq = 266017125.0/(10 * 16 * 16)

def getPeriodValues(maxNote=64, pal=False):
    semitone = 2.0**(1./12)
    octaveBase = (palFreq if pal else ntscFreq) / baseNoteFreq
    relFreqs = [(1 << (i // 12)) * semitone**(i % 12)
                for i in xrange(maxNote)]
    periods = [int(round(octaveBase / freq)) - 1 for freq in relFreqs]
    return periods

def makePeriodTable(filename, maxNote=64, pal=False):
    periods = getPeriodValues(maxNote, pal)
    systemName = "PAL" if pal else "NTSC"
    with open(filename, 'wt') as outfp:
        outfp.write("""; %s NES period table generated by mktables.py
.export periodTableLo, periodTableHi
.segment "RODATA"
periodTableLo:\n"""
                    % systemName)
        for i in range(0, maxNote, 12):
            outfp.write('  .byt '
                        + ','.join('$%02x' % (i % 256)
                                   for i in periods[i:i + 12])
                        + '\n')
        outfp.write('periodTableHi:\n')
        for i in range(0, maxNote, 12):
            outfp.write('  .byt '
                        + ','.join('$%02x' % (i >> 8)
                                   for i in periods[i:i + 12])
                        + '\n')

def makePALPeriodTable(filename):
    return makePeriodTable(filename, pal=True)

def makeHTMLPeriodTable(filename, maxNote=64, pal=False):
    keynames = [
        ('C',), ('C#', 'D&#9837;'), ('D',), ('D#', 'E&#9837;'),
        ('E',), ('F',), ('F#', 'G&#9837;'), ('G',),
        ('G#', 'A&#9837;'), ('A',), ('A#', 'B&#9837;'), ('B',)
    ]

    periods = getPeriodValues(maxNote, pal)
    apuFreq = palFreq if pal else ntscFreq
    rows = [(i, keynames[(i + 9) % 12],
             (i + 21) // 12,
             " (middle C)" if i == 27 else "",
             "%.1f" % (apuFreq / (p + 1)))
            for (i, p) in enumerate(periods)]
    rows = ['<tr%s><td class="numalign">%d</td><td>%s%s</td><td class="numalign">%s</td></tr>'
            % (' class="odd"' if len(nms) > 1 else '',
               i,
               '/'.join("%s%d" % (nm, octave) for nm in nms),
               midc,
               freq)
            for (i, nms, octave, midc, freq) in rows]
    out = ["""<!DOCTYPE HTML><html><head><title>Pitch table</title></head><body>
<style type="text/css">
td.numalign { text-align: right }
table.datatable { border: 1px solid #888; border-collapse: collapse; margin: 1em auto }
table.datatable tr { vertical-align: top }
table.datatable th { border: 1px solid #CCC; padding: 0.2em; background: #EEE }
table.datatable td { border: 1px solid #CCC; padding: 0.2em }
tr.odd { background: #EEE }
</style>
</head><body><h1>Pitch table</h1><p>Generated for music engine</p>

<table class="datatable">
<caption>Pitch values</caption>
<tr><th>Value</th><th>Name</th><th>Frequency</th></tr>
""",
           '\n'.join(rows),
           """
</table>

</body></html>"""]
    with open(filename, 'wt') as outfp:
        outfp.writelines(out)

tableNames = {
    'period': makePeriodTable,
    'htmlperiod': makeHTMLPeriodTable,
    'palperiod': makePALPeriodTable,
}

def main(argv):
    if len(argv) >= 2 and argv[1] in ('/?', '-?', '-h', '--help'):
        print("usage: %s TABLENAME FILENAME" % argv[0])
        print("known tables:", ' '.join(sorted(tableNames)))
    elif len(argv) < 3:
        print("mktables: too few arguments; try %s --help" % argv[0],
              file=sys.stderr)
        sys.exit(1)
    elif argv[1] in tableNames:
        tableNames[argv[1]](argv[2])
    else:
        print("mktables: no such table %s; try %s --help" % (argv[1], argv[0]),
              file=sys.stderr)
        sys.exit(1)

if __name__=='__main__':
    main(sys.argv)
##    main(['mkperiods.py', 'htmlperiod', 'out.html'])
